{
	"info": {
		"_postman_id": "59c531d3-1602-4a8d-a827-56399de8d61f",
		"name": "Deck of Cards API",
		"description": "## Summary\n\nA Postman collection for the [Deck of Cards API](https://deckofcardsapi.com/) that includes tests. These are mostly happy path workflow tests with a couple of common scenarios attached via the `data_tests.csv` file. Postman is not a great place to do boundary/unit testing.\n\n## Prerequisites\n\n- Postman (last tested with version 10.19.5)\n    \n- Node.js (last tested with version LTS 18.18.2)\n    \n- Newman (last tested with version 6.0.0) - install via NPM\n    \n\n## How to run tests\n\n### Postman GUI\n\n1. Clone this repository (`git clone https://github.com/Jmcosel/deck-of-cards-postman-tests.git`)\n    \n2. Open Postman and [import deck_of_cards_api.postman_collection.json](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/)\n    \n3. Use the [Collection Runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/) to run the test suite. Make sure to specify the `deck_data.csv` file for data variables.\n    \n\n### Newman CLI\n\n1. Clone this repository (`git clone https://github.com/Jmcosel/deck-of-cards-postman-tests.git`)\n    \n2. Simply run the following command: `newman run deck_of_cards_api.postman_collection.json -d deck_data.csv`",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "deck/:deckId",
			"item": [
				{
					"name": "pile/:pileId",
					"item": [
						{
							"name": "Adding to piles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "993812e5-6f5f-4e70-b795-b87d6a0f537e",
										"exec": [
											"const resp = pm.response.json();",
											"",
											"// Only run these tests for scenarios where just a single/1 deck is used. Multiple decks are not supported.",
											"const skipTests = pm.variables.get(\"deckCount\") > 1;",
											"",
											"(skipTests ? pm.test.skip : pm.test)(\"Schema verification\", () => {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(resp.success).to.eql(true);",
											"  pm.expect(resp.deck_id).to.be.a('string');",
											"  pm.expect(resp.remaining).to.be.a('number');",
											"  pm.expect(resp.piles).to.be.an('object');",
											"});",
											"",
											"(skipTests ? pm.test.skip : pm.test)(\"A new pile is initialized correctly (exists, card count)\", () => {",
											"  pm.expect(resp.piles).to.have.key(\"myPile\");",
											"  const cardAddedCount = pm.variables.get(\"pileCards\").split(\",\").length;",
											"  pm.expect(cardAddedCount).to.eql(resp.piles[\"myPile\"].remaining);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c5de40f-50f2-4633-b9ea-48f09c00bb1c",
										"exec": [
											"// Add back the cards query parameter taken out at the collection-level.",
											"// While \"deckCards\" is empty, \"pileCards\" is not and is required.",
											"pm.request.url.query.add(`cards=${pm.variables.get('pileCards')}`);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "87b7a9fc-b63c-40d2-bf7f-ac98b56e18cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deck/:deckId/pile/:pileId/add/?cards={{pileCards}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deck",
										":deckId",
										"pile",
										":pileId",
										"add",
										""
									],
									"query": [
										{
											"key": "cards",
											"value": "{{pileCards}}",
											"description": "(required) A list of card codes to add to the pile. These cards must have been drawn from the deck. Separate the card codes with commas, and each card code is a just a two character case-insensitive string. The first character is the card name (A, 2, 3, 4, 5, 6, 7, 8, 9, 0, J, Q, K); the second character is the suit (S, D, C, H)."
										}
									],
									"variable": [
										{
											"key": "deckId",
											"value": "{{deckId}}",
											"description": "The deck ID that contains the pile to create/add to."
										},
										{
											"key": "pileId",
											"value": "myPile",
											"description": "The name of the pile to add to. Will create if it doesn't already exist."
										}
									]
								},
								"description": "Piles can be used for discarding cards. Piles are created on the fly, just give a pile a name and add a drawn card to the pile. If the pile didn't exist before, it does now. After a card has been drawn from the deck it can be moved from pile to pile.\n\nNote: This will not work with multiple decks."
							},
							"response": []
						},
						{
							"name": "Listing cards in piles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16430579-7394-4d3b-ba8e-19d741e10dc2",
										"exec": [
											"// Create a pile for use",
											"const pileCreateUrl = `${pm.variables.get('baseUrl')}/deck/${pm.variables.get('deckId')}/pile/myPile/add/?cards=${pm.variables.get('pileCards')}`;",
											"pm.sendRequest(pileCreateUrl);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52715ed5-5a44-42f7-83e6-a59c9cf608dc",
										"exec": [
											"const resp = pm.response.json();",
											"",
											"// Only run these tests for scenarios where just a single/1 deck is used. Multiple decks are not supported.",
											"const skipTests = pm.variables.get(\"deckCount\") > 1;",
											"",
											"(skipTests ? pm.test.skip : pm.test)(\"Schema verification\", () => {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(resp.success).to.eql(true);",
											"  pm.expect(resp.deck_id).to.be.a('string');",
											"  pm.expect(resp.remaining).to.be.a('number');",
											"  pm.expect(resp.piles).to.be.an('object');",
											"  pm.expect(resp.piles[\"myPile\"]).to.be.an('object');",
											"  pm.expect(resp.piles[\"myPile\"].cards).to.be.an('array');",
											"});",
											"",
											"(skipTests ? pm.test.skip : pm.test)(\"The pile information returns the expected list of cards added\", () => {",
											"  const expectedCardsAdded = pm.variables.get(\"pileCards\").split(\",\");",
											"  resp.piles[\"myPile\"].cards.forEach((card) => {",
											"    pm.expect(expectedCardsAdded).to.include(card.code);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0531ce72-934b-4288-a429-cd3de3293ba7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deck/:deckId/pile/:pileId/list/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deck",
										":deckId",
										"pile",
										":pileId",
										"list",
										""
									],
									"variable": [
										{
											"key": "deckId",
											"value": "{{deckId}}",
											"description": "The deck ID that contains the pile to list."
										},
										{
											"key": "pileId",
											"value": "myPile",
											"description": "The pile ID to list."
										}
									]
								},
								"description": "List all cards in a pile.\n\nNote: This will not work with multiple decks."
							},
							"response": []
						},
						{
							"name": "Shuffle piles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4fc111e5-b791-4c42-9f60-9957655b1c31",
										"exec": [
											"// Create a pile for use",
											"const pileCreateUrl = `${pm.variables.get('baseUrl')}/deck/${pm.variables.get('deckId')}/pile/myPile/add/?cards=${pm.variables.get('pileCards')}`;",
											"pm.sendRequest(pileCreateUrl);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ced40750-f2b6-47b5-83ed-c09803ae857f",
										"exec": [
											"const resp = pm.response.json();",
											"",
											"// Only run these tests for scenarios where just a single/1 deck is used. Multiple decks are not supported.",
											"const skipTests = pm.variables.get(\"deckCount\") > 1;",
											"",
											"(skipTests ? pm.test.skip : pm.test)(\"Schema verification\", () => {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(resp.success).to.eql(true);",
											"  pm.expect(resp.deck_id).to.be.a('string');",
											"  pm.expect(resp.remaining).to.be.a('number');",
											"  pm.expect(resp.piles).to.be.an('object');",
											"  pm.expect(resp.piles[\"myPile\"]).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "990686f6-5a6d-4128-94e4-698e7cc6e747",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deck/:deckId/pile/:pileId/shuffle/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deck",
										":deckId",
										"pile",
										":pileId",
										"shuffle",
										""
									],
									"variable": [
										{
											"key": "deckId",
											"value": "{{deckId}}",
											"description": "The deck ID that contains the pile to shuffle."
										},
										{
											"key": "pileId",
											"value": "myPile",
											"description": "The pile ID to shuffle."
										}
									]
								},
								"description": "Shuffle the pile.\n\nNote: This will not work with multiple decks."
							},
							"response": []
						},
						{
							"name": "Drawing from piles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7054609a-4375-4adb-9500-3440b7fdc650",
										"exec": [
											"const resp = pm.response.json();",
											"",
											"// Only run these tests for scenarios where just a single/1 deck is used. Multiple decks are not supported.",
											"const skipTests = pm.variables.get(\"deckCount\") > 1;",
											"",
											"const initialCardCount = pm.variables.get(\"initialCardCount\");",
											"",
											"// drawCount defaults to 1 if unspecified.",
											"const drawCount = pm.variables.get(\"pileDrawCount\") || 1;",
											"",
											"// canDraw is whether we expect the draw operation to be successful or not, in case too many cards are attempted to be drawn.",
											"const canDraw = initialCardCount >= drawCount;",
											"",
											"(skipTests ? pm.test.skip : pm.test)(\"Can only fully draw an amount of cards that exist\", () => {",
											"  pm.response.to.have.status(!canDraw ? 404 : 200);",
											"  pm.expect(resp.success).to.be.eql(canDraw);",
											"});",
											"",
											"// Only applicable if the full draw operation was successful.",
											"if (canDraw) {",
											"  (skipTests ? pm.test.skip : pm.test)(\"Schema verification\", () => {",
											"    pm.expect(resp.deck_id).to.be.a('string');",
											"    pm.expect(resp.piles).to.be.an('object');",
											"    pm.expect(resp.piles[\"myPile\"]).to.be.an('object');",
											"    pm.expect(resp.cards).to.be.an('array');",
											"  });",
											"  ",
											"  (skipTests ? pm.test.skip : pm.test)(\"Remaining card count is calculated correctly\", () => {",
											"    // If the draw count is negative, the API draws until it reaches that amount of cards left.",
											"    const expectedRemaining = (drawCount < 0) ? Math.abs(drawCount) : initialCardCount - drawCount;",
											"    pm.expect(resp.piles[\"myPile\"].remaining).to.be.eql(expectedRemaining);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6bd7474f-156c-40da-aafa-7832eba27c71",
										"exec": [
											"// Create a pile for use",
											"const pileCreateUrl = `${pm.variables.get('baseUrl')}/deck/${pm.variables.get('deckId')}/pile/myPile/add/?cards=${pm.variables.get('pileCards')}`;",
											"pm.sendRequest(pileCreateUrl, function (err, response) {",
											"  pm.variables.set('initialCardCount', response.json().piles[\"myPile\"].remaining);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "031b63bd-5038-4de1-a1c7-627d5409aa53",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deck/:deckId/pile/:pileId/draw/?count={{pileDrawCount}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deck",
										":deckId",
										"pile",
										":pileId",
										"draw",
										""
									],
									"query": [
										{
											"key": "count",
											"value": "{{pileDrawCount}}",
											"description": "(optional) How many cards should be delt? Default is 1."
										},
										{
											"key": "cards",
											"value": "{{cards}}",
											"description": "(optional) Specify the cards that you want to draw from the pile. The default is to just draw off the top of the pile.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "deckId",
											"value": "{{deckId}}",
											"description": "The deck ID that contains the pile to draw from."
										},
										{
											"key": "pileId",
											"value": "myPile",
											"description": "The pile ID to draw from."
										}
									]
								},
								"description": "Draw card(s) from a specified pile."
							},
							"response": []
						},
						{
							"name": "Return cards to pile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b77641c6-6223-4f7c-b99c-8720da0275fe",
										"exec": [
											"pm.response.to.have.status(200);",
											"const resp = pm.response.json();",
											"",
											"// Only run these tests for scenarios where just a single/1 deck is used. Multiple decks are not supported.",
											"const skipTests = pm.variables.get(\"deckCount\") > 1;",
											"",
											"const initialDeckCardCount = pm.variables.get(\"initialDeckCardCount\");",
											"const initialPileCardCount = pm.variables.get(\"initialPileCardCount\");",
											"",
											"// drawCount defaults to 1 if unspecified.",
											"const drawCount = pm.variables.get(\"pileDrawCount\") || 1;",
											"",
											"// canDraw is whether we expect the draw operation to be successful or not, in case too many cards are attempted to be drawn.",
											"const canDraw = initialPileCardCount >= drawCount;",
											"",
											"// Only applicable if the full pile draw operation was successful.",
											"if (canDraw) {",
											"  (skipTests ? pm.test.skip : pm.test)(\"Schema verification\", () => {",
											"    pm.expect(resp.deck_id).to.eql(pm.variables.get(\"deckId\"));",
											"    pm.expect(resp.remaining).to.be.a('number');",
											"    pm.expect(resp.piles).to.be.an('object');",
											"    pm.expect(resp.piles[\"myPile\"]).to.be.an('object');",
											"  });",
											"",
											"  // Only applicable for full returns",
											"  if (!pm.variables.get(\"returnCards\")) {",
											"    (skipTests ? pm.test.skip : pm.test)(\"All cards from the pile have been returned to the deck\", () => {",
											"      pm.expect(resp.piles[\"myPile\"].remaining).to.eql(0)",
											"      pm.expect(resp.remaining).to.eql(pm.variables.get(\"initialDeckCardCount\") + pm.variables.get(\"drawnPileCardCount\"))",
											"    });",
											"  }",
											"",
											"  // Only applicable for partial returns",
											"  if (pm.variables.get(\"returnCards\")) {",
											"    (skipTests ? pm.test.skip : pm.test)(\"Returning specific cards increases the remaining deck count appropriately\", () => {",
											"      pm.expect(resp.piles[\"myPile\"].remaining).to.eql(pm.variables.get(\"drawnPileCardCount\") - pm.variables.get(\"returnCards\").split(\",\").length)",
											"      pm.expect(resp.remaining).to.eql(pm.variables.get(\"initialDeckCardCount\") + pm.variables.get(\"returnCards\").split(\",\").length)",
											"    });",
											"  }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "489fc084-9b44-4e81-bc01-c83e18a346ef",
										"exec": [
											"// Create a pile for use",
											"const pileCreateUrl = `${pm.variables.get('baseUrl')}/deck/${pm.variables.get('deckId')}/pile/myPile/add/?cards=${pm.variables.get('pileCards')}`;",
											"pm.sendRequest(pileCreateUrl, function (err, resp1) {",
											"  // This is the amount left in the main deck, after drawing some cards.",
											"  // Placing drawn cards to a pile doesn't matter for this value, it remains the same",
											"  // regardless.",
											"    pm.variables.set('initialDeckCardCount', resp1.json().remaining);",
											"    pm.variables.set('initialPileCardCount', resp1.json().piles[\"myPile\"].remaining)",
											"  // Then \"draw\" another set of cards from the pile to ensure it only returns ones still in the pile",
											"  let deckDrawUrl = pm.variables.get('baseUrl') + `/deck/${pm.variables.get('deckId')}/pile/myPile/draw/?`;",
											"  if (pm.variables.get('pileDrawCount')) { ",
											"    deckDrawUrl += `count=${pm.variables.get('pileDrawCount')}&`;",
											"  } else if (pm.variables.get('deckCards')) {",
											"    deckDrawUrl += `cards=${pm.variables.get('deckCards')}&`;",
											"  }",
											"",
											"  pm.sendRequest(deckDrawUrl, function (err, resp2) {",
											"    // The card count in the pile after \"drawing\" away some cards",
											"    pm.variables.set('drawnPileCardCount', resp2.json().piles[\"myPile\"].remaining);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d843f4d3-1a9a-4158-ad7e-4caaf701b49d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deck/:deckId/pile/:pileId/return/?cards={{returnCards}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deck",
										":deckId",
										"pile",
										":pileId",
										"return",
										""
									],
									"query": [
										{
											"key": "cards",
											"value": "{{returnCards}}",
											"description": "(optional) Use this parameter for for a list of cards to return (if valid)."
										}
									],
									"variable": [
										{
											"key": "deckId",
											"value": "{{deckId}}",
											"description": "The deck ID that contains the pile to draw from."
										},
										{
											"key": "pileId",
											"value": "myPile",
											"description": "The pile ID to draw from."
										}
									]
								},
								"description": "Use this call to return cards from a pile back to the main deck to re-use. It can take the cards parameter for a list of cards to return (if valid)."
							},
							"response": []
						}
					],
					"id": "a9215a12-f78e-419e-989e-919f70d4ff69",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "611868f6-662c-4a58-bc41-0083a2b0ce0e",
								"type": "text/javascript",
								"exec": [
									"// Create non-standard decks based on test data",
									"let deckCreateUrl = pm.variables.get('baseUrl') + \"/deck/new/shuffle/?\";",
									"if (pm.variables.get('deckCount')) deckCreateUrl += `deck_count=${pm.variables.get('deckCount')}&`;",
									"if (pm.variables.get('deckCards')) deckCreateUrl += `cards=${pm.variables.get('deckCards')}&`;",
									"if (pm.variables.get('jokersEnabled')) deckCreateUrl += `jokers_enabled=${pm.variables.get('jokersEnabled')}&`;",
									"",
									"pm.sendRequest(deckCreateUrl, function (err, response) {",
									"  const resp = response.json();",
									"  pm.variables.set('deckId', resp.deck_id);",
									"  // Draw half of the deck created for use with piles (or at minimum one)",
									"  const drawAmt = resp.remaining > 1 ? Math.floor(resp.remaining / 2) : 1;",
									"  const deckDrawUrl = `${pm.variables.get('baseUrl')}/deck/${resp.deck_id}/draw/?count=${drawAmt}`;",
									"  pm.variables.set(\"drawAmt\", drawAmt);",
									"  pm.sendRequest(deckDrawUrl, function(err, response) {",
									"    const resp = response.json();",
									"    let cardsDrawn = [];",
									"    resp.cards.forEach((card) => {",
									"      cardsDrawn.push(card.code);",
									"    });",
									"    pm.variables.set(\"pileCards\", cardsDrawn.join(\",\"));",
									"  });",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a823891c-3225-44ad-a6f9-ac9ff370c6a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Deck Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bd726bf-fb8b-4c9f-b299-545ac286c10e",
								"exec": [
									"pm.response.to.have.status(200);",
									"const resp = pm.response.json();",
									"",
									"pm.test(\"Schema verification\", () => {",
									"  pm.expect(resp.success).to.eql(true);",
									"  pm.expect(resp.deck_id).to.be.a('string');",
									"  pm.expect(resp.remaining).to.be.a('number');",
									"  pm.expect(resp.shuffled).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"A new deck is initialized correctly (unshuffled, correct card count)\", () => {",
									"  pm.expect(resp.shuffled).to.eql(false);",
									"  let cardsInDeck = pm.variables.get(\"deckCards\") ? pm.variables.get(\"deckCards\").split(\",\").length : 52;",
									"  if (pm.variables.get(\"jokersEnabled\")) cardsInDeck += 2;",
									"  const expectRemaining = (pm.variables.get(\"deckCount\") || 1) * cardsInDeck;",
									"  pm.expect(resp.remaining).to.eql(expectRemaining);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd0ed35-f3de-4cd8-a85a-8b61bdd89b65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0c257f85-87df-4de4-a005-5ce3398c70a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deck/:deckId/?deck_count={{deckCount}}&cards={{deckCards}}&jokers_enabled={{jokersEnabled}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deck",
								":deckId",
								""
							],
							"query": [
								{
									"key": "deck_count",
									"value": "{{deckCount}}",
									"description": "(optional; does nothing if the deck already exists) How many decks of cards should be shuffled into the provided deck ID? Default is 1."
								},
								{
									"key": "cards",
									"value": "{{deckCards}}",
									"description": "(optional; does nothing if the deck already exists) Default is all cards. If you want to use a partial deck, then you can pass the card codes you want to use using this parameter. Separate the card codes with commas, and each card code is a just a two character case-insensitive string. The first character is the card name (A, 2, 3, 4, 5, 6, 7, 8, 9, 0, J, Q, K); the second character is the suit (S, D, C, H)."
								},
								{
									"key": "jokers_enabled",
									"value": "{{jokersEnabled}}",
									"description": "(optional; does nothing if the deck already exists) Default is false. Enable to include two Jokers in the deck."
								}
							],
							"variable": [
								{
									"key": "deckId",
									"value": "{{deckId}}",
									"description": "Specify either \"new\" or a deck ID to get information for."
								}
							]
						},
						"description": "Get information for an existing deck, or create a new one."
					},
					"response": []
				},
				{
					"name": "(Re)shuffle the cards",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a9dfcaa-d85c-46db-8fb7-effc91727c29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e3e31df-9b81-4a01-9204-d52ad72993ef",
								"exec": [
									"pm.response.to.have.status(200);",
									"const resp = pm.response.json();",
									"",
									"pm.test(\"Schema verification + always return shuffled = true\", () => {",
									"  pm.expect(resp.success).to.eql(true);",
									"  pm.expect(resp.deck_id).to.be.a('string');",
									"  pm.expect(resp.remaining).to.be.a('number');",
									"  pm.expect(resp.shuffled).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "53564c58-952a-42c8-8534-f01f03b0ec03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deck/:deckId/shuffle/?deck_count={{deckCount}}&cards={{deckCards}}&jokers_enabled={{jokersEnabled}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deck",
								":deckId",
								"shuffle",
								""
							],
							"query": [
								{
									"key": "deck_count",
									"value": "{{deckCount}}",
									"description": "(optional) How many decks of cards should be shuffled into the provided deck ID? Default is 1."
								},
								{
									"key": "cards",
									"value": "{{deckCards}}",
									"description": "(optional) Default is all cards. If you want to use a partial deck, then you can pass the card codes you want to use using this parameter. Separate the card codes with commas, and each card code is a just a two character case-insensitive string. The first character is the card name (A, 2, 3, 4, 5, 6, 7, 8, 9, 0, J, Q, K); the second character is the suit (S, D, C, H)."
								},
								{
									"key": "jokers_enabled",
									"value": "{{jokersEnabled}}",
									"description": "(optional) Default is false. Enable to include two Jokers in the deck."
								}
							],
							"variable": [
								{
									"key": "deckId",
									"value": "{{deckId}}",
									"description": "Specify either \"new\" or a deck ID to shuffle."
								}
							]
						},
						"description": "Creates (or reuses) the deck, and then shuffles it."
					},
					"response": []
				},
				{
					"name": "Draw a card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2f90b18-51fc-4c85-8146-b2f6e8ad0588",
								"exec": [
									"pm.response.to.have.status(200);",
									"const resp = pm.response.json();",
									"",
									"pm.test(\"Schema verification\", () => {",
									"  pm.expect(resp.deck_id).to.eql(pm.variables.get(\"deckId\"));",
									"  pm.expect(resp.remaining).to.be.a('number');",
									"  pm.expect(resp.cards).to.be.an('array');",
									"});",
									"",
									"const initialCardCount = pm.variables.get(\"initialCardCount\");",
									"",
									"// drawCount defaults to 1 if unspecified.",
									"const drawCount = pm.variables.get(\"drawCount\") || 1;",
									"",
									"// canDraw is whether we expect the draw operation to be successful or not, in case too many cards are attempted to be drawn.",
									"const canDraw = initialCardCount >= drawCount;",
									"",
									"pm.test(\"Can only fully draw an amount of cards that exist\", () => {",
									"  pm.expect(resp.success).to.be.eql(canDraw);",
									"});",
									"",
									"// Only applicable if the full draw operation was successful.",
									"if (canDraw) {",
									"  pm.test(\"Remaining card count is calculated correctly\", () => {",
									"    // If the draw count is negative, the API draws until it reaches that amount of cards left.",
									"    const expectedRemaining = (drawCount < 0) ? Math.abs(drawCount) : initialCardCount - drawCount;",
									"    pm.expect(resp.remaining).to.be.eql(expectedRemaining);",
									"  });",
									"}",
									"",
									"// Only applicable for partial draw operations",
									"if (!canDraw) {",
									"  pm.test(\"Even if too many cards are requested, all remaining cards are still drawn\", () => {",
									"    pm.expect(resp.remaining).to.be.eql(0);",
									"    pm.expect(initialCardCount).to.be.eql(resp.cards.length);",
									"  });",
									"}",
									"",
									"// Only applicable for partial decks",
									"if(pm.variables.get(\"deckCards\")) {",
									"  pm.test(\"Cards drawn are only ones part of the deck\", () => {",
									"    const cardsInDeck = pm.variables.get(\"deckCards\").split(\",\");",
									"    resp.cards.forEach((card) => {",
									"      pm.expect(cardsInDeck).to.include(card.code);",
									"    });",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ed3697d8-5cf5-43b1-a3f9-3ab114202da7",
								"exec": [
									"// Create non-standard + shuffled decks based on test data",
									"let deckCreateUrl = pm.variables.get('baseUrl') + \"/deck/new/shuffle/?\";",
									"if (pm.variables.get('deckCount')) deckCreateUrl += `deck_count=${pm.variables.get('deckCount')}&`;",
									"if (pm.variables.get('deckCards')) deckCreateUrl += `cards=${pm.variables.get('deckCards')}&`;",
									"if (pm.variables.get('jokersEnabled')) deckCreateUrl += `jokers_enabled=${pm.variables.get('jokersEnabled')}&`;",
									"",
									"pm.sendRequest(deckCreateUrl, function (err, response) {",
									"  pm.variables.set('deckId', response.json().deck_id);",
									"  pm.variables.set('initialCardCount', response.json().remaining);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3dd373df-dc99-45dc-aea2-599e2d10485a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deck/:deckId/draw/?count={{drawCount}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deck",
								":deckId",
								"draw",
								""
							],
							"query": [
								{
									"key": "count",
									"value": "{{drawCount}}",
									"description": "(optional) How many cards should be delt? Default is 1."
								}
							],
							"variable": [
								{
									"key": "deckId",
									"value": "{{deckId}}",
									"description": "Specify either \"new\" or a deck ID to draw from. Note that only a standard 52-card deck can be created through this endpoint."
								}
							]
						},
						"description": "Creates a new deck."
					},
					"response": []
				},
				{
					"name": "Return cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77641c6-6223-4f7c-b99c-8720da0275fe",
								"exec": [
									"pm.response.to.have.status(200);",
									"const resp = pm.response.json();",
									"",
									"// Only run these tests for scenarios where just a single/1 deck is used. Multiple decks are not supported.",
									"const skipTests = pm.variables.get(\"deckCount\") > 1;",
									"",
									"(skipTests ? pm.test.skip : pm.test)(\"Schema verification\", () => {",
									"  pm.expect(resp.deck_id).to.eql(pm.variables.get(\"deckId\"));",
									"  pm.expect(resp.remaining).to.be.a('number');",
									"});",
									"",
									"// Only applicable for full returns",
									"if (!pm.variables.get(\"returnCards\")) {",
									"  (skipTests ? pm.test.skip : pm.test)(\"All cards have been returned to deck\", () => {",
									"    pm.expect(resp.remaining).to.eql(pm.variables.get(\"initialCardCount\"))",
									"  });",
									"}",
									"",
									"// Only applicable for partial returns",
									"if (pm.variables.get(\"returnCards\")) {",
									"  (skipTests ? pm.test.skip : pm.test)(\"Returning specific cards increases the remaining count appropriately\", () => {",
									"    pm.expect(resp.remaining).to.eql(pm.variables.get(\"drawnCardCount\") + pm.variables.get(\"returnCards\").split(\",\").length)",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "489fc084-9b44-4e81-bc01-c83e18a346ef",
								"exec": [
									"// Create non-standard + shuffled decks based on test data",
									"let deckCreateUrl = pm.variables.get('baseUrl') + \"/deck/new/shuffle/?\";",
									"if (pm.variables.get('deckCount')) deckCreateUrl += `deck_count=${pm.variables.get('deckCount')}&`;",
									"if (pm.variables.get('deckCards')) deckCreateUrl += `cards=${pm.variables.get('deckCards')}&`;",
									"if (pm.variables.get('jokersEnabled')) deckCreateUrl += `jokers_enabled=${pm.variables.get('jokersEnabled')}&`;",
									"",
									"pm.sendRequest(deckCreateUrl, function (err, resp1) {",
									"  pm.variables.set('deckId', resp1.json().deck_id);",
									"  pm.variables.set('initialCardCount', resp1.json().remaining);",
									"",
									"  // Then draw a set of cards from the deck so that they can be returned",
									"  let deckDrawUrl = pm.variables.get('baseUrl') + `/deck/${pm.variables.get('deckId')}/draw/?`;",
									"  if (pm.variables.get('drawCount')) deckDrawUrl += `count=${pm.variables.get('drawCount')}&`;",
									"",
									"  pm.sendRequest(deckDrawUrl, function (err, resp2) {",
									"    pm.variables.set('drawnCardCount', resp2.json().remaining);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a3617aa5-6e23-4a32-8be8-e2c0003dc947",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/deck/:deckId/return/?cards={{returnCards}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deck",
								":deckId",
								"return",
								""
							],
							"query": [
								{
									"key": "cards",
									"value": "{{returnCards}}",
									"description": "(optional) Use this parameter for for a list of cards to return (if valid)."
								}
							],
							"variable": [
								{
									"key": "deckId",
									"value": "{{deckId}}",
									"description": "Specify the deck ID to return to."
								}
							]
						},
						"description": "Use this call to return cards which have been drawn back to the main deck to re-use. It can take the cards parameter for a list of cards to return (if valid)."
					},
					"response": []
				}
			],
			"id": "e4dd2e3f-df7b-48d7-ba36-9c2414bbf417"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e74c7253-decc-4f5c-a82e-ca26a7d56d47",
				"type": "text/javascript",
				"exec": [
					"// Reset deckId to \"new\" before every run, let individual request tests override this as needed",
					"pm.variables.set(\"deckId\", \"new\");",
					"",
					"// Remove unused query parameters",
					"if (!pm.variables.get(\"deckCount\")) {",
					"  pm.request.url.query.remove(\"deck_count\");",
					"}",
					"if (!pm.variables.get(\"jokersEnabled\")) {",
					"  pm.request.url.query.remove(\"jokers_enabled\");",
					"}",
					"if (!pm.variables.get(\"drawCount\")) {",
					"  pm.request.url.query.remove(\"count\");",
					"}",
					"if (!pm.variables.get(\"deckCards\")) {  ",
					"  pm.request.url.query.remove(\"cards\");",
					"}",
					"if (pm.request.url.toString().includes(\"pile\") && !pm.variables.get(\"pileDrawCount\")) {",
					"  pm.request.url.query.remove(\"count\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5ff717a4-1003-4807-8d81-28f4807a0163",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://deckofcardsapi.com/api"
		},
		{
			"key": "deckId",
			"value": "new"
		}
	]
}